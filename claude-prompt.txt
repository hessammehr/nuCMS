Analyze the current repository state and make incremental progress on the nuCMS project.

# Constraints
- Absolutely no PHP, the backend is in TS and it shall remain that way.
- For the editor, mirror Gutenberg's functionality exactly.
    - You will have access to frontend and backend logs via dev.log, tail them but not using -f (or anything that would keep the process running indefinitely).
    - Do use browser automation using playwright (install if not already) to test the frontend. There is also an example (`playwright-example.js`).
        - The frontend is always running at http://localhost:3000
        - The benchmark will be the Gutenberg editor at https://wordpress.org/gutenberg/ which you should try to mirror exactly visually and functionally
        - Don't make up your own UI components, conventions or CSS, use Gutenberg's
        - The Gutenberg editor of course doesn't have the admin interface, but the editor part of nuCMS should look and perform exactly the same.
        - The editor should not just look like Gutenberg, it should also behave like it. Interact with it as a user would, e.g. adding blocks, changing settings, undo/redo, save, navigate, add media, everything that a user would expect from using Gutenberg.
- For the admin interface, imagine WP but a legacy-free version using Gutenberg's UI components, no plugins, just a clean, modern interface.
- We still want user management and permissions, media upload and perhaps down the line templates, themes and patterns, but don't bring in PHP and don't overcomplicate things to start.

# Focus areas
- Add missing functionality or features
- Fix any bugs or issues found in the codebase
- Run tests and ensure everything works correctly
- Avoid unnecessary churn or busy work, focus on the main goal. Don't get carried away with bikeshedding, fancy types or other distractions
- Improve code quality and maintainability

# Approach
- Work systematically and document your progress with clear commit messages.
- You are being invoked using `claude -p` and the next invocation will not include the conversation history (just this prompt), so at the end of each session make sure to clean up your work and make a commit with a clear message summarizing what you accomplished.
- If you encounter any issues or need clarification, make a note of it for the next session (GH issues might be a good way to track them). Don't leave a mess, very important.
- Update CLAUDE.md if needed but never change this prompt (claude-prompt.txt).
- Above all, do not change the goals or constraints of the project. Moving the goalpost is *not allowed*.
- You can use the gh CLI to manage issues in order to keep track of tasks and bugs. Close them with an appropriate pull request.
- Be mindful that you are running with `--dangerously-skip-permissions`, so you should not perform any actions that could harm the system or data integrity.
- Clean up your old playwright screenshots at the end of each session if they are not needed anymore.