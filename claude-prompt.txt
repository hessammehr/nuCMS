Analyze the current repository state and make incremental progress on the nuCMS project.

# Constraints
- Absolutely no PHP, the backend is in TS and it shall remain that way.
- For the editor, mirror Gutenberg's functionality exactly.
    - You will have access to frontend and backend logs via dev.log, tail them but not using -f (or anything that would keep the process running indefinitely).
    - Do use browser automation using playwright (install if not already) to test the frontend. There is also an example (`playwright-example.js`).
        - The frontend is always running at http://localhost:3000
        - The benchmark will be the Gutenberg editor at https://wordpress.org/gutenberg/ which you should try to mirror exactly visually and functionally
        - Don't make up your own UI components, conventions or CSS, use Gutenberg's
        - The Gutenberg editor of course doesn't have the admin interface, but the editor part of nuCMS should look and perform exactly the same.
        - The editor should not just look like Gutenberg, it should also behave like it. Interact with it as a user would, e.g. adding blocks, changing settings, undo/redo, save, navigate, add media, everything that a user would expect from using Gutenberg.
        - If possible, use playwright in non-headless mode so I can also see what you are seeing.
- For the admin interface, imagine WP but a legacy-free version using Gutenberg's UI components, no plugins, just a clean, modern interface.
- We still want user management and permissions, media upload and perhaps down the line templates, themes and patterns, but don't bring in PHP and don't overcomplicate things to start.

# Focus areas
- Add missing functionality or features
- Test admin interface and editor functionality using playwright to ensure everything works correctly
- Avoid unnecessary churn or busy work, focus on the main goal and making meaningful progress
- Don't get carried away with bikeshedding, code formatting, CI/CD, fancy types, anything enterprisy or other distractions
- Fix any bugs or issues found in the codebase
- Improve code quality and maintainability

# Approach
- Suggestions for when you "wake up":
    - Check the git log and GitHub issues to see recent activity and issues/tasks
    - Have a visual look at the current state of the admin interface and editor
- Suggestions in preparation for ending your session and "going to sleep":
    - Make sure to commit your changes with a clear message summarizing what you accomplished
    - Clean up any temporary files or screenshots created during the session
    - If you have any issues or tasks that need to be tracked, create GitHub issues for them
- Work systematically and document your progress with clear commit messages
- `git push` etc. may not work because this computer may be authorized using a fine-grained GitHub token so you will have to rely on `gh` for all your GitHub interactions (gh auth setup-git tends to sort this out)
- You are being invoked using `claude -p` and the next invocation will not include the conversation history (just this prompt), so at the end of each session make sure to clean up your work and make a commit with a clear message summarizing what you accomplished.
- If you encounter any issues or need clarification, make a note of it for the next session (GH issues might be a good way to track them). Don't leave a mess, very important.
- Update CLAUDE.md if needed but never change this prompt (claude-prompt.txt).
- Above all, do not change the goals or constraints of the project. Moving the goalpost is *not allowed*.
- You can use the gh CLI to manage issues in order to keep track of tasks and bugs. Close them with an appropriate pull request.
- Always a good idea to look at GitHub issues at the start of your session for tasks or bugs that need fixing.
- Remember you can attach screenshots to issues or pull requests using the `gh` CLI, much better than lots of random screenshots littering the repository.
- Be mindful that you are running with `--dangerously-skip-permissions`, so you should not perform any actions that could harm the system or data integrity.
- Clean up your old playwright screenshots at the end of each session if they are not needed anymore.
- If the working directory is dirty, this may be because the previous session did not end cleanly, so check if you can detect what task was being tackled and continue from there.
- Be mindful that claude has usage limits, so don't go for too long before making a commit and cleaning up your work. If you run out of usage it's not the end of the world, but the repository will be in a dirty state and you will have to figure out what you were working on last time.